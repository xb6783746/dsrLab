##
## This file is part of the libopencm3 project.
##
## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>
## Copyright (C) 2010 Piotr Esden-Tempski <piotr@esden.net>
## Copyright (C) 2013 Frantisek Burian <BuFran@seznam.cz>
##
## This library is free software: you can redistribute it and/or modify
## it under the terms of the GNU Lesser General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This library is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with this library. If not, see <http://www.gnu.org/licenses/>.
##

# Be silent per default, but 'make V=1' will show all compiler calls.
ifneq ($(V),1)
Q                := @
NULL                := 2>/dev/null
endif

###############################################################################
# Executables

PREFIX                ?= arm-none-eabi

CC                := $(PREFIX)-gcc
CXX                := $(PREFIX)-g++
LD                := $(PREFIX)-gcc
AR                := $(PREFIX)-ar
AS                := $(PREFIX)-as
OBJCOPY                := $(PREFIX)-objcopy
OBJDUMP                := $(PREFIX)-objdump
GDB                := $(PREFIX)-gdb
STFLASH                = $(shell which st-flash)


###############################################################################
# Source files

LDSCRIPT        ?= $(BINARY).ld

OBJS            += $(BINARY).o


#ifeq ($(V),1)
#$(info Using $(OPENCM3_DIR) path to library)
#endif

INCLUDE_DIRS      += -I$(BUILD_HOME)/stm_spl/STM32F4xx/inc -I$(BUILD_HOME)/stm_spl/CMSIS/inc -I$(BUILD_HOME)/stm_spl/CMSIS/ST/inc -I./ -I$(BUILD_HOME)/stm_eval/STMF4DISCOVERY_EVAL -I$(BUILD_HOME)/stm_eval/Common
LIB_DIR            = $(BUILD_HOME)/lib
SCRIPT_DIR        = ./scripts

###############################################################################
# C flags

CFLAGS                += -O0 -g
CFLAGS                += -Wall -Wextra -Wshadow -Wimplicit-function-declaration
CFLAGS                += -Wredundant-decls -Wmissing-prototypes -Wstrict-prototypes
CFLAGS                += -fno-common -ffunction-sections -fdata-sections

###############################################################################
# C++ flags

CXXFLAGS        += -Os -g
CXXFLAGS        += -Wextra -Wshadow -Wredundant-decls -Weffc++
CXXFLAGS        += -fno-common -ffunction-sections -fdata-sections

###############################################################################
# C & C++ preprocessor common flags

CPPFLAGS        += -MD
CPPFLAGS        += -Wall -Wundef
CPPFLAGS        += $(INCLUDE_DIRS) $(DEFS)

###############################################################################
# Linker flags

LDFLAGS                += --static -nostartfiles
LDFLAGS                += -L$(LIB_DIR) -L$(BUILD_HOME)/ld
LDFLAGS                += -T$(LDSCRIPT)
LDFLAGS                += -Wl,-Map=$(*).map
LDFLAGS                += -Wl,--gc-sections
ifeq ($(V),1)
LDFLAGS                += -Wl,--print-gc-sections
endif

###############################################################################
# Used libraries

LDLIBS                += -l$(LIBNAME)
LDLIBS                += -Wl,--start-group -lc -lgcc -lnosys -Wl,--end-group

###############################################################################
###############################################################################
###############################################################################

.SUFFIXES: .elf .bin .hex .srec .list .map .images
.SECONDEXPANSION:
.SECONDARY:

bldall : all

images: $(BINARY).images
flash: $(BINARY).flash

%.images: %.bin %.hex %.srec %.list %.map
	@printf "*** $* images generated ***\n"

%.bin: %.elf
	@#printf " OBJCOPY $(*).bin\n"
	$(Q)$(OBJCOPY) -Obinary $(*).elf $(*).bin

%.hex: %.elf
	@#printf " OBJCOPY $(*).hex\n"
	$(Q)$(OBJCOPY) -Oihex $(*).elf $(*).hex

%.srec: %.elf
	@printf " OBJCOPY $(*).srec\n"
	$(Q)$(OBJCOPY) -Osrec $(*).elf $(*).srec

%.list: %.elf
	@printf " OBJDUMP $(*).list\n"
	$(Q)$(OBJDUMP) -S $(*).elf > $(*).list

%.o: %.S
	$(Q)$(AS) $< -o $(*).o

%.elf %.map: $(OBJS) $(LDSCRIPT) $(STARTUP)
	@printf " LD $(*).elf\n"
	$(Q)$(LD) $(LDFLAGS) $(ARCH_FLAGS) $(OBJS) $(STARTUP) $(LDLIBS) -o $(*).elf

%.o: %.c
	@printf " CC $(*).c\n"
	$(Q)$(CC) $(CFLAGS) $(CPPFLAGS) $(ARCH_FLAGS) -o $(*).o -c $(*).c

%.o: %.cxx
	@printf " CXX $(*).cxx\n"
	$(Q)$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(ARCH_FLAGS) -o $(*).o -c $(*).cxx

%.o: %.cpp
	@printf " CXX $(*).cpp\n"
	$(Q)$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(ARCH_FLAGS) -o $(*).o -c $(*).cpp

clean:
	@printf " CLEAN\n"
	$(Q)$(RM) *.a *.o *.d *.elf *.bin *.hex *.srec *.list *.map


%.stlink-flash: %.bin
	@printf " FLASH $<\n"
	$(Q)$(STFLASH) write $(*).bin 0x8000000

ifeq ($(STLINK_PORT),)
ifeq ($(BMP_PORT),)
ifeq ($(OOCD_SERIAL),)
%.flash: %.hex
	@printf " FLASH $<\n"
	@# IMPORTANT: Don't use "resume", only "reset" will work correctly!
	$(Q)$(OOCD) -f interface/$(OOCD_INTERFACE).cfg \
                 -f board/$(OOCD_BOARD).cfg \
                 -c "init" -c "reset init" \
                 -c "flash write_image erase $(*).hex" \
                 -c "reset" \
                 -c "shutdown" $(NULL)
else
%.flash: %.hex
	@printf " FLASH $<\n"
	@# IMPORTANT: Don't use "resume", only "reset" will work correctly!
	$(Q)$(OOCD) -f interface/$(OOCD_INTERFACE).cfg \
                 -f board/$(OOCD_BOARD).cfg \
                 -c "ft2232_serial $(OOCD_SERIAL)" \
                 -c "init" -c "reset init" \
                 -c "flash write_image erase $(*).hex" \
                 -c "reset" \
                 -c "shutdown" $(NULL)
endif
else
%.flash: %.elf
	@printf " GDB $(*).elf (flash)\n"
	$(Q)$(GDB) --batch \
                 -ex 'target extended-remote $(BMP_PORT)' \
                 -x $(SCRIPT_DIR)/black_magic_probe_flash.scr \
                 $(*).elf
endif
else
%.flash: %.elf
	@printf " GDB $(*).elf (flash)\n"
	$(Q)$(GDB) --batch \
                 -ex 'target extended-remote $(STLINK_PORT)' \
                 -x $(SCRIPT_DIR)/stlink_flash.scr \
                 $(*).elf
endif

.PHONY: images clean

-include $(OBJS:.o=.d)
